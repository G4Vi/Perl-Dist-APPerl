diff --git a/home/heavy/cosmo/dir/perl5/.mailmap b/home/heavy/cosmo/perl5/.mailmap
index 72a8a4d6a7..37c3ffce5f 100644
--- a/home/heavy/cosmo/dir/perl5/.mailmap
+++ b/home/heavy/cosmo/perl5/.mailmap
@@ -646,6 +646,7 @@ Gabor Szabo <szabgab@gmail.com> Gabor Szabo <szabgab@gmail.com>
 Garry T. Williams <garry@zvolve.com> Garry T. Williams <garry@zvolve.com>
 Gary Clark <garyc@mail.jeld-wen.com> Gary Clark <garyc@mail.jeld-wen.com>
 Gary L. Armstrong <unknown> Gary L. Armstrong <unknown>
+Gavin Hayes <gavin@computoid.com> Gavin Hayes <gavin@computoid.com>
 Gavin Shelley <columbusmonkey@me.com> Gavin Shelley <columbusmonkey@me.com>
 Gene Sullivan <genesullivan50@yahoo.com> gene sullivan <genesullivan50@yahoo.com>
 Gene Sullivan <genesullivan50@yahoo.com> Gene Sullivan <gsullivan@cpan.org>
diff --git a/home/heavy/cosmo/dir/perl5/AUTHORS b/home/heavy/cosmo/perl5/AUTHORS
index 8f25e9d835..8fcde9e4e2 100644
--- a/home/heavy/cosmo/dir/perl5/AUTHORS
+++ b/home/heavy/cosmo/perl5/AUTHORS
@@ -482,6 +482,7 @@ Garry T. Williams              <garry@zvolve.com>
 Gary Clark                     <GaryC@mail.jeld-wen.com>
 Gary L. Armstrong
 Gary Ng                        <71564.1743@compuserve.com>
+Gavin Hayes                    <gavin@computoid.com>
 Gavin Shelley                  <columbusmonkey@me.com>
 Gene Sullivan                  <genesullivan50@yahoo.com>
 Geoffrey F. Green              <geoff-public@stuebegreen.com>
diff --git a/home/heavy/cosmo/dir/perl5/Configure b/home/heavy/cosmo/perl5/Configure
index 67e990217d..cd8ce30511 100755
--- a/home/heavy/cosmo/dir/perl5/Configure
+++ b/home/heavy/cosmo/perl5/Configure
@@ -2744,7 +2744,7 @@ int main(int argc, char *argv[]) {
   return 0;
 }
 EOM
-    if $cc -o try $ccflags $ldflags try.c; then
+    if $cc -o try $ccflags $ldflags try.c $libs; then
        :
     else
         echo "Uh-oh, the C compiler '$cc' doesn't seem to be working." >&4
@@ -2816,7 +2816,7 @@ int main(int argc, char *argv[]) {
   return 0;
 }
 EOM
-    if $cc -o try $ccflags $ldflags try.c; then
+    if $cc -o try $ccflags $ldflags try.c $libs; then
        :
     else
         if $test X"$despair" = Xyes; then
@@ -3665,6 +3665,11 @@ EOM
 		fi
 	fi
 
+	if [ $COSMO_REPO ]; then
+		osname='cosmo'
+		osvers=''
+	fi
+
         case "$targetarch" in
         '') ;;
         *)  hostarch=$osname
@@ -4576,7 +4581,7 @@ int main() {
 	return(0);
 }
 EOM
-if $cc -o try $ccflags $ldflags try.c; then
+if $cc -o try $ccflags $ldflags try.c $libs; then
 	gccversion=`$run ./try`
 	case "$gccversion" in
 	'') echo "You are not using GNU cc." ;;
@@ -4697,7 +4702,7 @@ int main(int argc, char **argv) {
 EOCP
 c99_for=no
 for flag in '' '-std=gnu99' '-std=c99'; do
-    if $cc -o try $flag $ccflags $ldflags try.c 2>/dev/null && ./try; then
+    if $cc -o try $flag $ccflags $ldflags try.c $libs 2>/dev/null && ./try; then
         c99_for="$flag"
         break;
     fi
@@ -5401,7 +5406,7 @@ echo " ";
 echo "Checking if your compiler accepts $flag" >&4;
 [ "X$sysroot" != "X" ] && echo "For sysroot = $sysroot";
 echo "int main(void) { return 0; }" > gcctest.c;
-if $cc $_sysroot -O2 $flag -o gcctest gcctest.c 2>gcctest.out && $run ./gcctest; then
+if $cc $_sysroot -O2 $flag -o gcctest $ccflags $ldflags gcctest.c $libs 2>gcctest.out && $run ./gcctest; then
     echo "Yes, it does." >&4;
     if $test -s gcctest.out ; then
         echo "But your platform does not like it:";
@@ -23699,6 +23704,8 @@ else
 	if $test -s ccsym.own; then
 		$test "$also" && echo " "
 		echo "Your C compiler ${also}defines the following cpp symbols:"
+		echo "LARGEFILE_SOURCE" > ccsym.own
+		echo "DONT_USE_BUILTIN_SETJMP" >> ccsym.own
 		$sed -e 's/\(..*\)=1/\1/' ccsym.own
 		$sed -e 's/\(..*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
 		ccsymbols=`$cat ccsym.own`
diff --git a/home/heavy/cosmo/dir/perl5/MANIFEST b/home/heavy/cosmo/perl5/MANIFEST
index c2057ee452..8e9795c82d 100644
--- a/home/heavy/cosmo/dir/perl5/MANIFEST
+++ b/home/heavy/cosmo/perl5/MANIFEST
@@ -4303,6 +4303,9 @@ ext/Errno/ChangeLog	Errno changes
 ext/Errno/Errno_pm.PL	Errno perl module create script
 ext/Errno/Makefile.PL	Errno extension makefile writer
 ext/Errno/t/Errno.t	See if Errno works
+ext/ErrnoRuntime/ErrnoRuntime.xs		ErrnoRuntime extension implementation
+ext/ErrnoRuntime/lib/ErrnoRuntime.pm	ErrnoRuntime extension Perl module
+ext/ErrnoRuntime/Makefile.PL	ErrnoRuntime extension makefile writer
 ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm	Writes {mini,}perlmain.c
 ext/Fcntl/Fcntl.pm	Fcntl extension Perl module
 ext/Fcntl/Fcntl.xs	Fcntl extension external subroutines
@@ -4765,6 +4768,7 @@ hints/broken-db.msg		Warning message for systems with broken DB library
 hints/bsdos.sh			Hints for named architecture
 hints/catamount.sh		Hints for named architecture
 hints/convexos.sh		Hints for named architecture
+hints/cosmo.sh			Hints for named architecture
 hints/cxux.sh			Hints for named architecture
 hints/cygwin.sh			Hints for named architecture
 hints/darwin.sh			Hints for named architecture
@@ -5517,6 +5521,7 @@ README.amiga			Perl notes for AmigaOS
 README.android			Perl notes for Android
 README.bs2000			Perl notes for POSIX-BC BS2000
 README.cn			Perl for Simplified Chinese (in UTF-8)
+README.cosmo			Perl notes for the Cosmopolitan Libc
 README.cygwin			Perl notes for Cygwin
 README.freebsd			Perl notes for FreeBSD
 README.haiku			Perl notes for Haiku
diff --git a/home/heavy/cosmo/dir/perl5/Makefile.SH b/home/heavy/cosmo/perl5/Makefile.SH
index cb0efb32ab..0d8e7b2094 100755
--- a/home/heavy/cosmo/dir/perl5/Makefile.SH
+++ b/home/heavy/cosmo/perl5/Makefile.SH
@@ -1001,6 +1001,19 @@ lib/buildcustomize.pl: $& $(miniperl_objs) write_buildcustomize.pl
 	$(MINIPERL) -f write_buildcustomize.pl
 !NO!SUBS!
 		;;
+	cosmo*)
+		$spitshell >>$Makefile <<'!NO!SUBS!'
+lib/buildcustomize.pl: $& $(miniperl_dep) write_buildcustomize.pl
+	-@rm -f miniperl.xok
+	$(CC) $(CLDFLAGS) -o miniperl.com \
+	    $(miniperl_objs) $(libs)
+	cp miniperl.com $(MINIPERL_EXE)
+	chmod -w miniperl.com
+	./miniperl --assimilate || true
+	$(LDLIBPTH) ./miniperl$(HOST_EXE_EXT) -w -Ilib -Idist/Exporter/lib -MExporter -e '<?>' || sh -c 'echo >&2 Failed to build miniperl.  Please run make minitest; exit 1'
+	$(MINIPERL) -f write_buildcustomize.pl
+!NO!SUBS!
+		;;
 	*)
 		if test "X$hostperl" != X; then
 			$spitshell >>$Makefile <<!GROK!THIS!
@@ -1054,7 +1067,13 @@ $(PERL_EXE): $& $(perlmain_dep) $(LIBPERL) $(static_ext) ext.libs $(PERLEXPORT)
 	       ;;
 	    esac
         ;;
-
+        cosmo) $spitshell >>$Makefile <<'!NO!SUBS!'
+	$(SHRPENV) $(CC) -o perl.com $(CLDFLAGS) $(CCDLFLAGS) $(perlmain_objs) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+	cp perl.com $(PERL_EXE)
+	chmod -w perl.com
+	./perl --assimilate || true
+!NO!SUBS!
+        ;;
         *) $spitshell >>$Makefile <<'!NO!SUBS!'
 	$(SHRPENV) $(CC) -o perl $(CLDFLAGS) $(CCDLFLAGS) $(perlmain_objs) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
 !NO!SUBS!
diff --git a/home/heavy/cosmo/dir/perl5/Porting/Maintainers.pl b/home/heavy/cosmo/perl5/Porting/Maintainers.pl
index 1413ce02fc..49200f34b7 100755
--- a/home/heavy/cosmo/dir/perl5/Porting/Maintainers.pl
+++ b/home/heavy/cosmo/perl5/Porting/Maintainers.pl
@@ -1385,6 +1385,7 @@ use File::Glob qw(:case);
                 ext/Devel-Peek/
                 ext/DynaLoader/
                 ext/Errno/
+                ext/ErrnoRuntime/
                 ext/ExtUtils-Miniperl/
                 ext/Fcntl/
                 ext/File-DosGlob/
diff --git a/home/heavy/cosmo/perl5/README.cosmo b/home/heavy/cosmo/perl5/README.cosmo
new file mode 100644
index 0000000000..e5b5de8952
--- /dev/null
+++ b/home/heavy/cosmo/perl5/README.cosmo
@@ -0,0 +1,87 @@
+If you read this file _as_is_, just ignore the funny characters you see.
+It is written in the POD format (see pod/perlpod.pod) which is specially
+designed to be readable as is.
+
+=head1 NAME
+
+perlcosmo - Build-once run-anywhere Perl using the Cosmopolitan Libc
+
+=head1 DESCRIPTION
+
+The cosmo platform addition eases building Perl with the Cosmopolitan
+Libc. When you build with the Cosmopolitan Libc, the libc is the
+platform as the Cosmopolitan Libc targets building simultaneous support
+for multiple operating systems (Unixes, Windows, etc) into the same
+binary.
+
+To get the most benefits of the cosmo platform, you likely want to
+build Actually Portable Perl (APPerl) instead of this directly. See
+L<Perl::Dist::APPerl> ; APPerl Manager (apperlm) includes a front-end
+for building perl from source with the Cosmopolitan Libc. The
+instructions in this document only cover building perl, not building or
+packaging into APPerl (single executable perl with perl modules
+embedded inside).
+
+=head1 BUILD
+
+Download the Cosmopolitan Libc and build with the desired MODE:
+
+  git clone https://github.com/jart/cosmopolitan ../cosmopolitan
+  make -C ../cosmopolitan -j4 MODE=
+
+Run Configure, but with some environment variables to point it at
+cosmopolitan; update COSMO_MODE to the MODE you set before and
+COSMO_REPO to the absolute path of the cosmopolitan repo. Then, make
+and install like usual.
+
+  COSMO_MODE= COSMO_REPO="/home/gavin/cosmopolitan" ./Configure -de
+  make
+  make install
+
+Note the installed binary is assimilated (see Cosmopolitan Libc
+--assimilate flag), meaning it only runs on the current operating
+system. The perl.com in the perl repo, however, is actually portable
+and will run on several operating systems. For a solution that builds
+on this, by packaging perl modules and scripts inside of the executable
+and more, see L<Perl::Dist::APPerl>.
+
+=head1 KNOWN PROBLEMS
+
+cosmo perl is a work in progress, many major issues are present.
+
+=over 4
+
+=item *
+
+C<system> behavior when a shell is required, depends on the currently
+running operating system. On most systems it uses, C<sh>, but on
+Windows it uses C<cmd.exe>. Therefore, it's still hard to use portably.
+However, it is sufficient for pulling up a pager for L<perldoc> .
+
+=item *
+
+After building, only Pure Perl modules may be added as perl is built
+statically.
+
+=item *
+
+Some magic only works when the binary is assimilated. For example,
+modifying C<$0>. Running with C<--assimilate> will bind the binary to
+the current operating system.
+
+=back
+
+=head1 ACKNOWLEDGEMENTS
+
+The L<Cosmopolitan Libc|https://github.com/jart/cosmopolitan>
+contributors, especially L<Justine Tunney|https://justine.lol/> and
+L<Gautham Venkatasubramanian|https://ahgamut.github.io>.
+Gautham's
+L<Python port|https://ahgamut.github.io/2021/07/13/ape-python/>
+to the Cosmopolitan Libc inspired this port.
+
+=head1 CONTACT
+
+The port in-progress is being done by Gavin Hayes <gahayes@cpan.org>
+
+Last update: 2022-10-11
diff --git a/home/heavy/cosmo/dir/perl5/cpan/ExtUtils-Constant/lib/ExtUtils/Constant/ProxySubs.pm b/home/heavy/cosmo/perl5/cpan/ExtUtils-Constant/lib/ExtUtils/Constant/ProxySubs.pm
index 0aee5233fe..cd17c1c86f 100644
--- a/home/heavy/cosmo/dir/perl5/cpan/ExtUtils-Constant/lib/ExtUtils/Constant/ProxySubs.pm
+++ b/home/heavy/cosmo/perl5/cpan/ExtUtils-Constant/lib/ExtUtils/Constant/ProxySubs.pm
@@ -406,13 +406,14 @@ EOC
 
 	print $c_fh "struct $struct_type $struct;\n";
 
+    my $structtypetype = $type ? 'static struct' : 'static const struct';
 	print $struct_fh <<"EOBOOT";
 
-    static const struct $struct_type $array_name\[] =
+    $structtypetype $struct_type $array_name\[] =
       {
 EOBOOT
 
-
+    my @valuestowrite;
 	foreach my $item (@{$found->{$type}}) {
             my ($name, $namelen, $value, $macro)
                  = $self->name_len_value_macro($item);
@@ -429,8 +430,8 @@ EOBOOT
 	    } else {
 		print $struct_fh $ifdef;
 	    }
-	    print $struct_fh "        { ", join (', ', "\"$name\"", $namelen,
-						 &$type_to_value($value)),
+		push @valuestowrite, &$type_to_value($value);
+	    print $struct_fh "        { ", join (', ', "\"$name\"", $namelen),
 						 " },\n",
 						 $self->macro_to_endif($macro);
 	}
@@ -438,6 +439,28 @@ EOBOOT
     # Terminate the list with a NULL
 	print $struct_fh "        { NULL, 0", (", 0" x $number_of_args), " } };\n";
 
+	if($type) {
+		print $struct_fh "{\nunsigned i = 0;\n";
+		foreach my $item (@{$found->{$type}}) {
+            my ($name, $namelen, $value, $macro) = $self->name_len_value_macro($item);
+	        my $ifdef = $self->macro_to_ifdef($macro);
+	        if (!$ifdef && $item->{invert_macro}) {
+	        carp("Attempting to supply a default for '$name' which has no conditional macro");
+	        next;
+	        }
+	        if ($item->{invert_macro}) {
+	        print $struct_fh $self->macro_to_ifndef($macro);
+	        print $struct_fh
+	        "        /* This is the default value: */\n" if $type;
+	        } else {
+	        print $struct_fh $ifdef;
+	        }
+			print $struct_fh $array_name,"[i++].value = ". (shift @valuestowrite) . ";\n";
+			print $struct_fh $self->macro_to_endif($macro);
+	    }
+	    print $struct_fh "}\n";
+	}
+
 	print $xs_fh <<"EOBOOT" if $type;
 	const struct $struct_type *$iterator{$type} = $array_name;
 EOBOOT
diff --git a/home/heavy/cosmo/dir/perl5/cpan/Perl-OSType/lib/Perl/OSType.pm b/home/heavy/cosmo/perl5/cpan/Perl-OSType/lib/Perl/OSType.pm
index a72dd024b5..a0f2606137 100644
--- a/home/heavy/cosmo/dir/perl5/cpan/Perl-OSType/lib/Perl/OSType.pm
+++ b/home/heavy/cosmo/perl5/cpan/Perl-OSType/lib/Perl/OSType.pm
@@ -55,6 +55,7 @@ my %OSTYPES = qw(
   nto         Unix
   qnx         Unix
   android     Unix
+  cosmo       Unix
 
   dos         Windows
   MSWin32     Windows
diff --git a/home/heavy/cosmo/dir/perl5/cpan/Pod-Perldoc/lib/Pod/Perldoc.pm b/home/heavy/cosmo/perl5/cpan/Pod-Perldoc/lib/Pod/Perldoc.pm
index bb6ffc83ef..af5878313a 100644
--- a/home/heavy/cosmo/dir/perl5/cpan/Pod-Perldoc/lib/Pod/Perldoc.pm
+++ b/home/heavy/cosmo/perl5/cpan/Pod-Perldoc/lib/Pod/Perldoc.pm
@@ -1929,7 +1929,7 @@ sub page {  # apply a pager to the output file
             $self->aside("About to try calling $pager $output\n");
             if ($self->is_vms) {
                 last if system("$pager $output") == 0;
-	    } elsif($self->is_amigaos) { 
+	    } elsif($self->is_amigaos) {
                 last if system($pager, $output) == 0;
             } else {
                 last if system("$pager \"$output\"") == 0;
diff --git a/home/heavy/cosmo/dir/perl5/cpan/Socket/Socket.xs b/home/heavy/cosmo/perl5/cpan/Socket/Socket.xs
index b4bccb796d..3ec940c3e6 100644
--- a/home/heavy/cosmo/dir/perl5/cpan/Socket/Socket.xs
+++ b/home/heavy/cosmo/perl5/cpan/Socket/Socket.xs
@@ -1165,7 +1165,7 @@ inet_ntop(af, ip_address_sv)
 	STRLEN addrlen;
 #ifdef AF_INET6
 	struct in6_addr addr;
-	char str[INET6_ADDRSTRLEN];
+	char str[65];
 #else
 	struct in_addr addr;
 	char str[INET_ADDRSTRLEN];
@@ -1177,20 +1177,19 @@ inet_ntop(af, ip_address_sv)
 
 	ip_address = SvPVbyte(ip_address_sv, addrlen);
 
-	switch(af) {
-	  case AF_INET:
-	    if(addrlen != 4)
+	if(af == AF_INET) {
+		if(addrlen != 4)
 		croak("Bad address length for Socket::inet_ntop on AF_INET;"
 		      " got %" UVuf ", should be 4", (UV)addrlen);
-	    break;
+	}
 #ifdef AF_INET6
-	  case AF_INET6:
-	    if(addrlen != 16)
+	else if(af == AF_INET6) {
+		if(addrlen != 16)
 		croak("Bad address length for Socket::inet_ntop on AF_INET6;"
 		      " got %" UVuf ", should be 16", (UV)addrlen);
-	    break;
+	}
 #endif
-	  default:
+	else {
 		croak("Bad address family for %s, got %d, should be"
 #ifdef AF_INET6
 		      " either AF_INET or AF_INET6",
@@ -1230,16 +1229,15 @@ inet_pton(af, host)
 	struct in_addr ip_address;
 #endif
 
-	switch(af) {
-	  case AF_INET:
-	    addrlen = 4;
-	    break;
+	if(af == AF_INET) {
+		addrlen = 4;
+	}
 #ifdef AF_INET6
-	  case AF_INET6:
-	    addrlen = 16;
-	    break;
+	else if(af == AF_INET6) {
+		addrlen = 16;
+	}
 #endif
-	  default:
+	else {
 		croak("Bad address family for %s, got %d, should be"
 #ifdef AF_INET6
 		      " either AF_INET or AF_INET6",
@@ -1248,6 +1246,7 @@ inet_pton(af, host)
 #endif
 		      "Socket::inet_pton", af);
 	}
+
 	ok = (*host != '\0') && inet_pton(af, host, &ip_address);
 
 	ST(0) = sv_newmortal();
diff --git a/home/heavy/cosmo/dir/perl5/dist/Time-HiRes/Makefile.PL b/home/heavy/cosmo/perl5/dist/Time-HiRes/Makefile.PL
index e5ba503707..c8e792203e 100644
--- a/home/heavy/cosmo/dir/perl5/dist/Time-HiRes/Makefile.PL
+++ b/home/heavy/cosmo/perl5/dist/Time-HiRes/Makefile.PL
@@ -81,7 +81,7 @@ __EOD__
             $errornull = '';
         }
 
-        $cccmd = "$Config{'cc'} -o $tmp $ccflags $tmp.c @$LIBS $errornull"
+        $cccmd = "$Config{'cc'} -o $tmp $ccflags $Config{'ldflags'} $tmp.c @$LIBS $Config{'libs'} $errornull"
             unless defined $cccmd;
 
        if ($^O eq 'VMS') {
diff --git a/home/heavy/cosmo/dir/perl5/dist/threads-shared/shared.xs b/home/heavy/cosmo/perl5/dist/threads-shared/shared.xs
index 6a7f03c289..38844079d0 100644
--- a/home/heavy/cosmo/dir/perl5/dist/threads-shared/shared.xs
+++ b/home/heavy/cosmo/perl5/dist/threads-shared/shared.xs
@@ -706,20 +706,17 @@ Perl_sharedsv_cond_timedwait(perl_cond *cond, perl_mutex *mut, double abs)
 
     CLANG_DIAG_IGNORE_STMT(-Wthread-safety);
     /* warning: calling function 'pthread_cond_timedwait' requires holding mutex 'mut' exclusively [-Wthread-safety-analysis] */
-    switch (pthread_cond_timedwait(cond, mut, &ts)) {
+    const int ecode = pthread_cond_timedwait(cond, mut, &ts);
 	CLANG_DIAG_RESTORE_STMT;
-
-        case 0:         got_it = 1; break;
-        case ETIMEDOUT:             break;
+    if(ecode == 0)
+        got_it = 1;
+    else if((ecode != ETIMEDOUT)
 #ifdef OEMVS
-        case -1:
-            if (errno == ETIMEDOUT || errno == EAGAIN)
-                break;
+    && ((ecode != -1) || (errno != ETIMEDOUT && errno != EAGAIN))
 #endif
-        default:
-            Perl_croak_nocontext("panic: cond_timedwait");
-            break;
-    }
+    )
+        Perl_croak_nocontext("panic: cond_timedwait");
+
     return (got_it);
 #    endif /* OS2 */
 #  endif /* WIN32 */
diff --git a/home/heavy/cosmo/dir/perl5/doio.c b/home/heavy/cosmo/perl5/doio.c
index f0d451af3c..52f039c129 100644
--- a/home/heavy/cosmo/dir/perl5/doio.c
+++ b/home/heavy/cosmo/perl5/doio.c
@@ -55,6 +55,11 @@
 #  define OPEN_EXCL 0
 #endif
 
+#ifdef __COSMOPOLITAN__
+#    define _COSMO_SOURCE
+#    include "libc/dce.h"
+#endif
+
 #define PERL_MODE_MAX 8
 #define PERL_FLAGS_MAX 10
 
@@ -2512,7 +2517,16 @@ Perl_do_exec3(pTHX_ const char *incmd, int fd, int do_report)
             }
           doshell:
             PERL_FPU_PRE_EXEC
-            PerlProc_execl(PL_sh_path, "sh", "-c", cmd, (char *)NULL);
+#ifdef __COSMOPOLITAN__
+            if(IsWindows())
+            {
+                PerlProc_execl("/C/Windows/System32/cmd.exe", "/C/Windows/System32/cmd.exe", "/c", cmd, (char *)NULL);
+            }
+            else
+#endif
+            {
+                PerlProc_execl(PL_sh_path, "sh", "-c", cmd, (char *)NULL);
+            }
             PERL_FPU_POST_EXEC
             S_exec_failed(aTHX_ PL_sh_path, fd, do_report);
             goto leave;
diff --git a/home/heavy/cosmo/dir/perl5/ext/Errno/Errno_pm.PL b/home/heavy/cosmo/perl5/ext/Errno/Errno_pm.PL
index ee2f4a3a92..e5902fa53c 100644
--- a/home/heavy/cosmo/dir/perl5/ext/Errno/Errno_pm.PL
+++ b/home/heavy/cosmo/perl5/ext/Errno/Errno_pm.PL
@@ -36,6 +36,33 @@ if ($Config{gccversion} ne '' && $^O eq 'MSWin32') {
     process_file('includes.c');
     unlink 'includes.c';
 }
+elsif($^O eq 'cosmo') {
+    # use cosmo's internal api to load the errno names
+    open(my $cfile, '>', 'errno.c')  or
+    die("Failed to open errno.c");
+    print $cfile <<'MAGNUM';
+#include "libc/fmt/magnumstrs.internal.h"
+#include <stdio.h>
+int main(void)
+{
+    for (unsigned i = 0; kErrnoNames[i].x != MAGNUM_TERMINATOR; ++i)
+    {
+        printf("%s\n", MAGNUM_STRING(kErrnoNames, i));
+    }
+}
+MAGNUM
+    close($cfile);
+    system("$Config{cc} $Config{ccflags} errno.c $Config{ldflags} $Config{libs} -o errno") == 0 or die "Failed to compile errno.c";
+    unlink('errno.c');
+    open(my $errnoout, '-|', './errno') or die "Failed to run errno";
+    while(<$errnoout>) {
+        chomp;
+        $err{$_} = 1;
+    }
+    close($errnoout);
+    unlink('errno');
+    $err{EWOULDBLOCK} = 1; # EWOULDBLOCK isn't in the table as it's the same value as EAGAIN
+}
 else {
     foreach $file (@files) {
 	process_file($file);
@@ -212,12 +239,30 @@ sub write_errno_pm {
     if ($IsMSWin32) {
 	print CPPI qq[#include "../../win32/include/sys/errno2.h"\n];
     }
- 
-    foreach $err (keys %err) {
-	print CPPI '"',$err,'" [[',$err,']]',"\n";
-    }
 
-    close(CPPI);
+    if($^O ne 'cosmo') {
+        foreach $err (keys %err) {
+            print CPPI '"',$err,'" [[',$err,']]',"\n";
+        }
+        close(CPPI);
+    }
+    else {
+        # in cosmo the preprocessor alone isn't enough to determine errno values
+        # instead generate and run an executable to generate the file to be fed to the preprocessor
+        close(CPPI);
+        open(my $CIN, '>', 'errno.c') or
+        die "Cannot open errno.c";
+        print $CIN "#include <stdio.h>\n#include <errno.h>\n";
+        print $CIN "int main(void){\n";
+        foreach my $name (keys %err) {
+            print $CIN '    printf("\\"'.$name.'\\" [[%d]]\n", '."$name);\n";
+        }
+        print $CIN "}\n";
+        close($CIN);
+        system("$Config{cc} $Config{ccflags} errno.c $Config{ldflags} $Config{libs} -o errno") == 0 or die "Failed to compile errno.c";
+        system("./errno > errno.c") == 0 or die "Failed to generate errno.c";
+        unlink('errno');
+    }
 
     {	# BeOS (support now removed) did not enter this block
     # invoke CPP and read the output
@@ -314,9 +359,39 @@ EDQ
     foreach $err (@err) {
 	print "\t$err => $err{$err},\n";
     }
+    print "    );\n";
+    if($^O eq 'cosmo') {
+        open(my $uname, '-|', 'uname') or
+        die "Failed to run uname";
+        my $buildos = <$uname>;
+        chomp $buildos;
+        close($uname);
+        print "\n".'    my $buildos = '."'$buildos';\n";
+print <<'ESQ';
+    # In cosmo the constants of errno change based on the current operating
+    # system. An XS module is provided to load them, however for miniperl's
+    # sake, the constants of the build os are encoded above.
+    if(eval "use ErrnoRuntime; 1;") {
+        foreach my $key (keys %err) {
+            $err{$key} = ErrnoRuntime::strtoerrno($key);
+        }
+    }
+    else {
+        open(my $uname, '-|', 'uname') or
+        die "Failed to run uname";
+        my $curos = <$uname>;
+        close($uname);
+        chomp $curos;
+        my $failmsg = "The errno constants in Errno.pm are for miniperl on $buildos only";
+        $curos eq $buildos or die $failmsg;
+        eval "use Config::Perl::V; 1;" or die "Failed to load Config::Perl::V";
+        my $local_config = Config::Perl::V::myconfig();
+        $local_config->{build}{options}{PERL_IS_MINIPERL} or die $failmsg;
+    }
 
+ESQ
+    }
 print <<'ESQ';
-    );
     # Generate proxy constant subroutines for all the values.
     # Well, almost all the values. Unfortunately we can't assume that at this
     # point that our symbol table is empty, as code such as if the parser has
diff --git a/home/heavy/cosmo/perl5/ext/ErrnoRuntime/.gitignore b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/.gitignore
new file mode 100644
index 0000000000..e54624d60d
--- /dev/null
+++ b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/.gitignore
@@ -0,0 +1 @@
+!/Makefile.PL
diff --git a/home/heavy/cosmo/perl5/ext/ErrnoRuntime/ErrnoRuntime.xs b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/ErrnoRuntime.xs
new file mode 100644
index 0000000000..598a8a1452
--- /dev/null
+++ b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/ErrnoRuntime.xs
@@ -0,0 +1,34 @@
+#define PERL_NO_GET_CONTEXT
+#include "EXTERN.h"
+#include "perl.h"
+#include "XSUB.h"
+#include <errno.h>
+#include "libc/fmt/magnumstrs.internal.h"
+
+MODULE = ErrnoRuntime		PACKAGE = ErrnoRuntime
+
+IV
+strtoerrno(name)
+        const char *name
+        CODE:
+            unsigned i;
+            RETVAL = 0;
+            for (i = 0; kErrnoNames[i].x != MAGNUM_TERMINATOR; ++i)
+            {
+                if(strcmp(name, MAGNUM_STRING(kErrnoNames, i)) == 0)
+                {
+                    RETVAL = MAGNUM_NUMBER(kErrnoNames, i);
+                    break;
+                }
+            }
+            // EWOULDBLOCK isn't in the table as it's the same as EAGAIN
+            if(strcmp(name, "EWOULDBLOCK") == 0)
+            {
+                RETVAL = EWOULDBLOCK;
+            }
+            else if(kErrnoNames[i].x == MAGNUM_TERMINATOR)
+            {
+                croak("Unknown Errno constant %s", name);
+            }
+        OUTPUT:
+            RETVAL
\ No newline at end of file
diff --git a/home/heavy/cosmo/perl5/ext/ErrnoRuntime/Makefile.PL b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/Makefile.PL
new file mode 100644
index 0000000000..799e4a12bf
--- /dev/null
+++ b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/Makefile.PL
@@ -0,0 +1,15 @@
+BEGIN { require 5.008_001 }
+use ExtUtils::MakeMaker;
+
+# this module only needed and implemented for cosmo right now
+$^O eq 'cosmo' or die "OS unsupported";
+
+WriteMakefile(
+    VERSION_FROM => "lib/ErrnoRuntime.pm",
+    NAME         => "ErrnoRuntime",
+    OBJECT       => '$(O_FILES)',
+    ABSTRACT     => 'Load Errno constants at runtime',
+    AUTHOR       => 'Gavin Hayes <gahayes@cpan.org>',
+    PREREQ_PM    => {
+    },
+);
diff --git a/home/heavy/cosmo/perl5/ext/ErrnoRuntime/lib/ErrnoRuntime.pm b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/lib/ErrnoRuntime.pm
new file mode 100644
index 0000000000..f53859e5d3
--- /dev/null
+++ b/home/heavy/cosmo/perl5/ext/ErrnoRuntime/lib/ErrnoRuntime.pm
@@ -0,0 +1,68 @@
+package ErrnoRuntime;
+
+use 5.020002;
+use strict;
+use warnings;
+our $VERSION = '0.0';
+
+require Exporter;
+
+our @ISA = qw(Exporter);
+
+# Items to export into callers namespace by default. Note: do not export
+# names by default without a very good reason. Use EXPORT_OK instead.
+# Do not simply export all your public functions/methods/constants.
+
+# This allows declaration	use ErrnoRuntime ':all';
+# If you do not need this, moving things directly into @EXPORT or @EXPORT_OK
+# will save memory.
+our %EXPORT_TAGS = ( 'all' => [ qw(
+	
+) ] );
+
+our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );
+
+our @EXPORT = qw(
+	
+);
+
+require XSLoader;
+XSLoader::load('ErrnoRuntime', $VERSION);
+
+# Preloaded methods go here.
+
+1;
+
+__END__
+
+=pod
+
+=encoding utf-8
+
+=head1 NAME
+
+ErrnoRuntime - XS extension module for loading errno values at
+runtime
+
+=head1 SYNOPSIS
+
+    use ErrnoRuntime;
+
+=head1 AUTHOR
+
+Gavin Hayes, C<< <gahayes at cpan.org> >>
+
+=head1 SUPPORT AND DOCUMENTATION
+
+You can find documentation for this module with the perldoc command.
+
+    perldoc ErrnoRuntime
+
+=head1 LICENSE AND COPYRIGHT
+
+This software is copyright (c) 2022 by Gavin Hayes.
+
+This is free software; you can redistribute it and/or modify it under
+the same terms as the Perl 5 programming language system itself.
+
+=cut
diff --git a/home/heavy/cosmo/dir/perl5/ext/POSIX/t/sigaction.t b/home/heavy/cosmo/perl5/ext/POSIX/t/sigaction.t
index 024c66a147..2741c895ed 100644
--- a/home/heavy/cosmo/dir/perl5/ext/POSIX/t/sigaction.t
+++ b/home/heavy/cosmo/perl5/ext/POSIX/t/sigaction.t
@@ -51,7 +51,7 @@ ok($oldaction->{MASK}->ismember(SIGUSR1), "SIGUSR1 ismember MASK");
 
 SKIP: {
     skip("sigaction() thinks different in $^O", 1)
-	if $^O eq 'linux' || $^O eq 'unicos';
+	if $^O eq 'linux' || $^O eq 'unicos' || $^O eq 'cosmo';
     is($oldaction->{FLAGS}, 0);
 }
 
diff --git a/home/heavy/cosmo/perl5/hints/cosmo.sh b/home/heavy/cosmo/perl5/hints/cosmo.sh
new file mode 100644
index 0000000000..739058b542
--- /dev/null
+++ b/home/heavy/cosmo/perl5/hints/cosmo.sh
@@ -0,0 +1,21 @@
+#! /bin/sh
+# cosmo.sh - hints for building perl using the Cosmopolitan Libc
+#
+
+test -d "$COSMO_REPO" || exit 1;
+
+usedl='undef'
+usenm='false'
+so='none'
+osname='cosmo'
+osvers=''
+libpth=''
+d_procselfexe='undef'
+locincpth=''
+loclibpth=''
+glibpth=''
+cc="/home/heavy/cosmo/cosmocc/bin/x86_64-unknown-cosmo-cc"
+ccflags="-fno-stack-protector"
+ldflags="-fno-stack-protector"
+libs=''
+unset COSMO_REPO
diff --git a/home/heavy/cosmo/dir/perl5/lib/.gitignore b/home/heavy/cosmo/perl5/lib/.gitignore
index cb6a26cfcc..8d99235088 100644
--- a/home/heavy/cosmo/dir/perl5/lib/.gitignore
+++ b/home/heavy/cosmo/perl5/lib/.gitignore
@@ -37,6 +37,7 @@
 /Encode/
 /Env.pm
 /Errno.pm
+/ErrnoRuntime.pm
 /Exporter.pm
 /Exporter/
 /ExtUtils/CBuilder.pm
diff --git a/home/heavy/cosmo/dir/perl5/patchlevel.h b/home/heavy/cosmo/perl5/patchlevel.h
index 52a8d53879..d52e867594 100644
--- a/home/heavy/cosmo/dir/perl5/patchlevel.h
+++ b/home/heavy/cosmo/perl5/patchlevel.h
@@ -157,6 +157,13 @@ hunk.
 #  endif
 static const char * const local_patches[] = {
         NULL
+        ,"G4Vi:cosmo/c473e9-73ecc6c - https://github.com/G4Vi/perl5/compare/c473e9~1...73ecc6c various changes to support building with the Cosmopolitan Libc"
+        ,"G4Vi:cosmo/2fb034f - https://github.com/G4Vi/perl5/commit/2fb034ffb02db2b3ac09706c954704930c620c0b fix Time-HiRes Configure to work for cosmopolitan"
+        ,"G4Vi:cosmo/3643b8b - https://github.com/G4Vi/perl5/commit/3643b8bd369ea1e8715a27ce8821c8e70f2c17e0 add cosmo as Unix in Perl::OSType (fixes Module::Build)"
+        ,"G4Vi:cosmo/e3d8537 - https://github.com/G4Vi/perl5/commit/e3d853703f5c7c951a14e1eed186105cc0e0b7e3 s/perl.elf$/perl.com.dbg/ as perl.com.dbg is useful for --ftrace"
+        ,"G4Vi:cosmo/7138814 - https://github.com/G4Vi/perl5/commit/713881482f9968f4960090d2699bc4cb4a46dc94 update for cosmo 3.0.2, new ape copying"
+        ,"G4Vi:cosmo/ecf4f8d - https://github.com/G4Vi/perl5/commit/ecf4f8ddb6aaad4544b8e16541c52b4dc570b491 revert a no longer needed switch rewrite"
+        ,"G4Vi:cosmo/022d57c - https://github.com/G4Vi/perl5/commit/022d57c45c0005ea8a1d9a5b8fe7eb7eb7b29225 revert ecf4f8d and 7138814"
 #ifdef PERL_GIT_UNCOMMITTED_CHANGES
         ,"uncommitted-changes"
 #endif
diff --git a/home/heavy/cosmo/dir/perl5/pod/.gitignore b/home/heavy/cosmo/perl5/pod/.gitignore
index a16aaa9a5f..b731fa2fd6 100644
--- a/home/heavy/cosmo/dir/perl5/pod/.gitignore
+++ b/home/heavy/cosmo/perl5/pod/.gitignore
@@ -4,6 +4,7 @@
 /perlandroid.pod
 /perlbs2000.pod
 /perlcn.pod
+/perlcosmo.pod
 /perlcygwin.pod
 /perldos.pod
 /perlfreebsd.pod
diff --git a/home/heavy/cosmo/dir/perl5/pod/perl.pod b/home/heavy/cosmo/perl5/pod/perl.pod
index 6a14569758..5db5882a9c 100644
--- a/home/heavy/cosmo/dir/perl5/pod/perl.pod
+++ b/home/heavy/cosmo/perl5/pod/perl.pod
@@ -277,6 +277,7 @@ aux h2ph h2xs perlbug pl2pm pod2html pod2man splain xsubpp
     perlamiga		Perl notes for AmigaOS
     perlandroid		Perl notes for Android
     perlbs2000		Perl notes for POSIX-BC BS2000
+    perlcosmo		Perl notes for the Cosmopolitan Libc
     perlcygwin		Perl notes for Cygwin
     perlfreebsd 	Perl notes for FreeBSD
     perlhaiku		Perl notes for Haiku
