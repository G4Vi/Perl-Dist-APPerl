#!/usr/bin/perl
use strict; use warnings;
use File::Path qw(make_path);
use JSON::PP qw();
use Cwd qw(cwd);

my $onlysettings = scalar(@ARGV) && ($ARGV[0] eq '--only-settings');

my %defconfig = (
    cosmo_remotes => {
        origin => 'https://github.com/G4Vi/cosmopolitan',
        upstream => 'https://github.com/jart/cosmopolitan',
    },
    perl_remotes => {
        origin => 'https://github.com/G4Vi/perl5',
    },
    apperl_configs => {
        base => {
            perl_id => 'cosmo',
            cosmo_id => 'master',
        },
        'v5.36.0-full' => {
            base => 'base',
        },
        'v5.36.0-full-vista' => {
            base => 'base',
            perl_id => 'cosmo-vista',
            cosmo_id => 'fix_vista_via_revert',
        },
    }
);

my $configdir = $ENV{XDG_CONFIG_HOME} // ($ENV{HOME}.'/.config');
$configdir .= '/apperl';
$defconfig{perl_repo} = "$configdir/perl5";
$defconfig{cosmo_repo} = "$configdir/cosmopolitan";
my $configpath = "$configdir/apperl.json";
die "Error, '$configpath' already exists" if( -e $configpath);
make_path($configdir);
open(my $fh, '>', $configpath) or die("Failed to open $configpath for writing");
print $fh JSON::PP->new->pretty->encode(\%defconfig);
close($fh);
if($onlysettings) {
    print "Success, wrote default settings to $configpath\n";
    print "YOU are responsible for setting perl_repo and\n";
    print "cosmo_repo to the path to them and setting the git remotes\n";
    print "appropiately\n";
    exit 0;
}
my $startdir = cwd;
setup_repo($defconfig{cosmo_repo}, $defconfig{cosmo_remotes});
setup_repo($defconfig{perl_repo}, $defconfig{perl_remotes});
print "cd $startdir\n";
chdir($startdir) or die "Failed to chdir $startdir";
print "Success, wrote default settings to $configpath and setup repos\n";

sub command_or_die {
    print join(' ', @_), "\n";
    system(@_) == 0 or die;
}

sub setup_repo {
    my ($repopath, $remotes) = @_;
    print "mkdir -p $repopath\n";
    make_path($repopath);
    print "cd $repopath\n";
    chdir($repopath) or die "Failed to chdir $repopath";
    command_or_die('git', 'init');
    command_or_die('git', 'checkout', '-b', 'placeholder_dont_use');
    foreach my $remote (keys %{$remotes}) {
        command_or_die('git', 'remote', 'add', $remote, $remotes->{$remote});
        command_or_die('git', 'fetch', $remote);
    }
}
